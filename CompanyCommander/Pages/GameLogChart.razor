@page "/chart"
@using BlazorBootstrap
@using CompanyCommander.Backend
@using CompanyCommander.DB
@using CompanyCommander.Model
@using System.Drawing
@inject GameService _gameService
@inject AppDbContext db
@* <div class="container-fluid overflow-x-auto"> *@
@* <div style="width: 100%; overflow-x: auto;">
    <LineChart @ref="lineChart" Width="400" />
</div> *@

<div class="mt-5">

    <div class="mt-5 d-flex flex-column align-items-start">


        <div class="mb-3 w-100">
            <AutoComplete @bind-Value="customerName"
                          TItem="GameInfo"
                          DataProvider="CustomersDataProvider"
                          PropertyName="Description"
                          Placeholder="Spiel suchen..."
                          OnChanged="OnAutoCompleteChanged" />
        </div>
        <div class="mb-3">
            <Button Type="ButtonType.Button" Color="ButtonColor.Primary"
                    Active="false"
                    Size="ButtonSize.Small" Class="my-1 mr-1" @onclick="async () => await ShowEinkommenAsync()">
                Einkommen
            </Button>

            <Button Type="ButtonType.Button" Color="ButtonColor.Primary"
                    Active="false"
                    Size="ButtonSize.Small" Class="my-1 mr-1" @onclick="async () => await ShowLagerAsync()">
                Lager
            </Button>
        </div>
    </div>
</div>
<div style="overflow-x: auto;">
    <LineChart @ref="lineChart" />
</div>


@code {
    private LineChart lineChart = default!;
    private LineChartOptions lineChartOptions = default!;
    private ChartData chartData = default!;

    private List<Stockpile> _currentSockpile;
    private List<DB.Income> _currentIncome;
    private string? customerName;
    public IEnumerable<Customer>? customers;

    private async Task<AutoCompleteDataProviderResult<GameInfo>> CustomersDataProvider(AutoCompleteDataProviderRequest<GameInfo> request)
    {
        var rounds = await _gameService.FindRoundsAsync(request.Filter.Value);

        return new AutoCompleteDataProviderResult<GameInfo>() { Data = rounds, TotalCount = rounds.Count };
        // var customers = await _customerService.GetCustomersAsync(request.Filter, request.CancellationToken); // API call
        // return await Task.FromResult(new AutoCompleteDataProviderResult<Customer2> { Data = customers, TotalCount = customers.Count() });
    }

    private async void OnAutoCompleteChanged(GameInfo roundInfo)
    {
        if (roundInfo != null)
        {
            var rounds = await _gameService.GetRoundsAsync(roundInfo.Id);
            _currentSockpile = new List<Stockpile>();
            _currentIncome = new List<DB.Income>();

            foreach (var round in rounds.Where(r => r.RoundNr > 1))
            {
                _currentSockpile.Add(new Stockpile() { Type = StockpileType.Fuel, Amount = round.Stockpile.Fuel, Round = round.RoundNr });
                _currentSockpile.Add(new Stockpile() { Type = StockpileType.Manpower, Amount = round.Stockpile.Manpower, Round = round.RoundNr });
                _currentSockpile.Add(new Stockpile() { Type = StockpileType.Ammo, Amount = round.Stockpile.Ammo, Round = round.RoundNr });
                _currentSockpile.Add(new Stockpile() { Type = StockpileType.VictoryPoints, Amount = round.Stockpile.VictoryPoints, Round = round.RoundNr });

                _currentIncome.Add(new DB.Income() { Type = StockpileType.Fuel, Amount = round.Income.Fuel, Round = round.RoundNr });
                _currentIncome.Add(new DB.Income() { Type = StockpileType.Manpower, Amount = round.Income.Manpower, Round = round.RoundNr });
                _currentIncome.Add(new DB.Income() { Type = StockpileType.Ammo, Amount = round.Income.Ammo, Round = round.RoundNr });
                _currentIncome.Add(new DB.Income() { Type = StockpileType.VictoryPoints, Amount = round.Income.VictoryPoints, Round = round.RoundNr });
            }

            chartData = new ChartData { Labels = new List<string>(), Datasets = GetDataSets() };
            await LoadLagerAsync();
            await lineChart.UpdateAsync(chartData, lineChartOptions);
        }
    }

    public async Task ShowEinkommenAsync()
    {
        chartData = new ChartData { Labels = new List<string>(), Datasets = GetDataSets() };
        await LoadEinkommenAsync();
        await lineChart.UpdateAsync(chartData, lineChartOptions);
    }
    public async Task ShowLagerAsync()
    {
        chartData = new ChartData { Labels = new List<string>(), Datasets = GetDataSets() };
        await LoadLagerAsync();
        await lineChart.UpdateAsync(chartData, lineChartOptions);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
    }

    private async Task ShowHorizontalLineChartAsync()
    {
        lineChartOptions.IndexAxis = "y";
        await lineChart.UpdateAsync(chartData, lineChartOptions);
    }

    private async Task ShowVerticalLineChartAsync()
    {
        lineChartOptions.IndexAxis = "x";
        await lineChart.UpdateAsync(chartData, lineChartOptions);
    }

    #region Data Preparation

    protected async override void OnAfterRender(bool firstRender)
    {
        base.OnAfterRender(firstRender);
        if (firstRender)
        {
            await db.LoadDatabaseAsync();
            _currentSockpile = db.Stockpile.Find(s => s.Round != 1).ToList();
            _currentIncome = db.Income.Find(s => s.Round != 1).ToList();

            chartData = new ChartData { Labels = new List<string>(), Datasets = GetDataSets() };
            await LoadLagerAsync();
            await lineChart.InitializeAsync(chartData, lineChartOptions);
        }


    }

    public async Task LoadLagerAsync()
    {
        foreach (var round in _currentSockpile.GroupBy(s => s.Round).OrderBy(si => si.Key))
        {

            if (round.Key > 1)
            {
                var data = new List<IChartDatasetData>();
                foreach (var art in round.GroupBy(r => r.Type))
                {
                    {
                        data.Add(new LineChartDatasetData(art.Key.ToString(), art.First().Amount));
                    }
                }

                chartData = await lineChart.AddDataAsync(chartData, $"Runde {round.Key - 1}", data);
            }
        }

        lineChartOptions = new()
            {
                IndexAxis = "x",
                Interaction = new Interaction { Mode = InteractionMode.Index, Intersect = false },
                Responsive = true,
            };
    }

    public async Task LoadEinkommenAsync()
    {
        foreach (var round in _currentIncome.GroupBy(s => s.Round).OrderBy(si => si.Key))
        {

            if (round.Key > 1)
            {
                var data = new List<IChartDatasetData>();
                foreach (var art in round.GroupBy(r => r.Type))
                {
                    {
                        if (art.Count() > 1)
                        {
                            var x = 2;
                        }
                        data.Add(new LineChartDatasetData(art.Key.ToString(), art.First().Amount));
                    }
                }
                chartData = await lineChart.AddDataAsync(chartData, $"Runde {round.Key - 1}", data);
            }
        }

        lineChartOptions = new()
            {
                IndexAxis = "x",
                Interaction = new Interaction { Mode = InteractionMode.Index, Intersect = false },
                Responsive = true,

            };
    }

    private Dictionary<StockpileType, Color> _colorMapping = new Dictionary<StockpileType, Color>()
    {
      { StockpileType.Fuel, ColorTranslator.FromHtml("#3B8640")},
      { StockpileType.Manpower, ColorTranslator.FromHtml("#CED442") },
      { StockpileType.Ammo,  ColorTranslator.FromHtml("#CE3E26")},
      { StockpileType.VictoryPoints, ColorTranslator.FromHtml("#1B2E5C")}
    };
    
    private List<IChartDataset> GetDataSets()
    {
        var datasets = new List<IChartDataset>();
        var stocks = _currentSockpile.GroupBy(s => s.Type).ToList();
        foreach (var group in stocks)
        {
            var l = new LineChartDataset
                {
                    Label = group.Key.ToString(),
                    Data = new List<double?>(),//Die Werte von der Art
                    BackgroundColor = _colorMapping[group.Key].ToRgbaString(),
                    BorderColor = _colorMapping[group.Key].ToRgbString(),
                    PointRadius = new List<double> { 5 },
                    PointHoverRadius = new List<double> { 8 },
                };

            datasets.Add(l);
        }

        return datasets;
    }


    #endregion Data Preparation

}