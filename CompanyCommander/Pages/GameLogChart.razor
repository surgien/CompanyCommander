@page "/chart"
@using BlazorBootstrap
@using CompanyCommander.DB
@using CompanyCommander.Model
@inject AppDbContext db
@* <div class="container-fluid overflow-x-auto"> *@
@* <div style="width: 100%; overflow-x: auto;">
    <LineChart @ref="lineChart" Width="400" />
</div> *@

<div class="mt-5">

    <div class="mt-5 d-flex flex-column align-items-start">


        <div class="mb-3 w-100">
            <AutoComplete @bind-Value="customerName"
                          TItem="Customer"
                          DataProvider="CustomersDataProvider"
                          PropertyName="CustomerName"
                          Placeholder="Spiel suchen..."
                          OnChanged="(Customer customer) => OnAutoCompleteChanged(customer)" />
        </div>
        <div class="mb-3">
            <Button Type="ButtonType.Button" Color="ButtonColor.Primary"
                    Active="false"
                    Size="ButtonSize.Small" Class="my-1 mr-1" @onclick="async () => await ShowEinkommenAsync()">
                Einkommen
            </Button>

            <Button Type="ButtonType.Button" Color="ButtonColor.Primary"
                    Active="false"
                    Size="ButtonSize.Small" Class="my-1 mr-1" @onclick="async () => await ShowLagerAsync()">
                Lager
            </Button>
        </div>
    </div>
</div>

<div style="width: 100%; height: 100%; overflow-x: auto;">
    <LineChart @ref="lineChart" />
</div>


@code {
    private LineChart lineChart = default!;
    private LineChartOptions lineChartOptions = default!;
    private ChartData chartData = default!;

    private int datasetsCount;
    private string? customerName;
    public IEnumerable<Customer>? customers;

    private async Task<AutoCompleteDataProviderResult<Customer>> CustomersDataProvider(AutoCompleteDataProviderRequest<Customer> request)
    {
        if (customers is null) // pull customers only one time for client-side autocomplete
            customers = GetCustomers(); // call a service or an API to pull the customers

        return await Task.FromResult(request.ApplyTo(customers.OrderBy(customer => customer.CustomerName)));
    }

    private IEnumerable<Customer> GetCustomers()
    {
        return new List<Customer> {
            new(1, "Pich S"),
            new(2, "sfh Sobi"),
            new(3, "Jojo chan"),
            new(4, "Jee ja"),
            new(5, "Rose Canon"),
            new(6, "Manju A"),
            new(7, "Bandita PA"),
            new(8, "Sagar Adil"),
            new(9, "Isha Wang"),
            new(10, "Daina JJ"),
            new(11, "Komala Mug"),
            new(12, "Dikshita BD"),
            new(13, "Neha Gosar"),
            new(14, "Preeti S"),
            new(15, "Sagar Seth"),
            new(16, "Vinayak MM"),
            new(17, "Vijaya Lakhsmi"),
            new(18, "Jahan K"),
            new(19, "Joy B"),
            new(20, "Zaraiah C"),
            new(21, "Laura L"),
            new(22, "Punith ES")
        };
    }

    private void OnAutoCompleteChanged(Customer customer)
    {
        // TODO: handle your own logic

        // NOTE: do null check
        Console.WriteLine($"'{customer?.CustomerName}' selected.");
    }

    public async Task ShowEinkommenAsync()
    {
        datasetsCount = 0;
        chartData = new ChartData { Labels = new List<string>(), Datasets = GetDataSets() };
        await LoadEinkommenAsync();
        await lineChart.UpdateAsync(chartData, lineChartOptions);
    }
    public async Task ShowLagerAsync()
    {
        datasetsCount = 0;
        chartData = new ChartData { Labels = new List<string>(), Datasets = GetDataSets() };
        await LoadLagerAsync();
        await lineChart.UpdateAsync(chartData, lineChartOptions);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
    }

    private async Task ShowHorizontalLineChartAsync()
    {
        lineChartOptions.IndexAxis = "y";
        await lineChart.UpdateAsync(chartData, lineChartOptions);
    }

    private async Task ShowVerticalLineChartAsync()
    {
        lineChartOptions.IndexAxis = "x";
        await lineChart.UpdateAsync(chartData, lineChartOptions);
    }

    #region Data Preparation


    protected override async Task OnInitializedAsync()
    {
        // var inc = db.Income.Find(s => s.Round != 1).GroupBy(s => s.Round).OrderBy(s => s.Key).ToList();

    }

    protected async override void OnAfterRender(bool firstRender)
    {
        base.OnAfterRender(firstRender);
        await db.LoadDatabaseAsync();

        _stocks = db.Stockpile.Find(s => s.Round != 1).GroupBy(s => s.Type).ToList();

        chartData = new ChartData { Labels = new List<string>(), Datasets = GetDataSets() };
        await LoadLagerAsync();
        await lineChart.InitializeAsync(chartData, lineChartOptions);
    }

    public async Task LoadLagerAsync()
    {
        foreach (var round in db.Stockpile.Find(s => s.Round != 1).GroupBy(s => s.Round).OrderBy(si => si.Key))
        {

            if (round.Key > 1)
            {
                var data = new List<IChartDatasetData>();
                foreach (var art in round.GroupBy(r => r.Type))
                {
                    {
                        if (art.Count() > 1)
                        {
                            var x = 2;
                        }

                        data.Add(new LineChartDatasetData(art.Key.ToString(), art.Single().Amount));
                    }
                }

                chartData = await lineChart.AddDataAsync(chartData, $"Runde {round.Key - 1}", data);
            }
        }

        lineChartOptions = new()
            {
                IndexAxis = "x",
                Interaction = new Interaction { Mode = InteractionMode.Index, Intersect = false },
                Responsive = true,
            };
    }

    public async Task LoadEinkommenAsync()
    {
        foreach (var round in db.Income.Find(s => s.Round != 1).GroupBy(s => s.Round).OrderBy(si => si.Key))
        {

            if (round.Key > 1)
            {
                var data = new List<IChartDatasetData>();
                foreach (var art in round.GroupBy(r => r.Type))
                {
                    {
                        if (art.Count() > 1)
                        {
                            var x = 2;
                        }
                        data.Add(new LineChartDatasetData(art.Key.ToString(), art.Single().Amount));
                    }
                }
                chartData = await lineChart.AddDataAsync(chartData, $"Runde {round.Key - 1}", data);
            }
        }

        lineChartOptions = new()
            {
                IndexAxis = "x",
                Interaction = new Interaction { Mode = InteractionMode.Index, Intersect = false },
                Responsive = true,

            };
    }

    private List<IGrouping<StockpileType, Stockpile>> _stocks;

    private List<IChartDataset> GetDataSets()
    {
        var datasets = new List<IChartDataset>();


        foreach (var group in _stocks)
        {
            var c = ColorUtility.CategoricalTwelveColors[datasetsCount].ToColor();

            datasetsCount += 1;

            var l = new LineChartDataset
                {
                    Label = group.Key.ToString(),
                    Data = new List<double?>(),//Die Werte von der Art
                    BackgroundColor = c.ToRgbaString(),
                    BorderColor = c.ToRgbString(),
                    PointRadius = new List<double> { 5 },
                    PointHoverRadius = new List<double> { 8 },
                };

            datasets.Add(l);
        }

        return datasets;
    }


    #endregion Data Preparation

}