@page "/"
@using CompanyCommander.DB
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject AppDbContext db
@inject IJSRuntime JS

<PageTitle>Counter</PageTitle>

<h1>BuildingBoard</h1>
<button class="btn btn-primary" @onclick="NewGameAsync">Neues Spiel</button>

<p role="status">Runde: @currentRound</p>


<p role="status">Einkommen Manpower: @currentIncomeManpower</p>
<button class="btn btn-primary" @onclick="() => IncrementCount(StockpileType.Manpower)">+1</button>
<button class="btn btn-primary" @onclick="() => DecrementCount(StockpileType.Manpower)">-1</button>

<p role="status">Einkommen Ammo: @currentIncomeAmmo</p>
<button class="btn btn-primary" @onclick="() => IncrementCount(StockpileType.Ammo)">+1</button>
<button class="btn btn-primary" @onclick="() => DecrementCount(StockpileType.Ammo)">-1</button>

<p role="status">Einkommen Fuel: @currentIncomeFuel</p>
<button class="btn btn-primary" @onclick="() => IncrementCount(StockpileType.Fuel)">+1</button>
<button class="btn btn-primary" @onclick="() => DecrementCount(StockpileType.Fuel)">-1</button>

<p role="status">Einkommen VictoryPoints: @currentIncomeVictoryPoints</p>
<button class="btn btn-primary" @onclick="() => IncrementCount(StockpileType.VictoryPoints)">+1</button>
<button class="btn btn-primary" @onclick="() => DecrementCount(StockpileType.VictoryPoints)">-1</button>

<br />
<br />
<button class="btn btn-primary" @onclick="NewRoundAsync">Nächste Runde</button>


<p role="status">Lager Manpower: @currentCountManpower</p>
<button class="btn btn-primary" @onclick="() => BuyOne(StockpileType.Manpower)">-1</button>
<p role="status">Lager Ammo: @currentCountAmmo</p>
<button class="btn btn-primary" @onclick="() => BuyOne(StockpileType.Ammo)">-1</button>
<p role="status">Lager Fuel: @currentCountFuel</p>
<button class="btn btn-primary" @onclick="() => BuyOne(StockpileType.Fuel)">-1</button>
<p role="status">Lager Victory-Points: @currentCountVictoryPoints</p>


@code {
    //Initiale erste Runde:
    private int currentIncomeManpower;
    private int currentIncomeAmmo;
    private int currentIncomeFuel;
    private int currentIncomeVictoryPoints;
    private int currentCountManpower;
    private int currentCountAmmo;
    private int currentCountFuel;
    private int currentCountVictoryPoints;
    private int currentRound;

    protected override async Task OnInitializedAsync()
    {
        await db.LoadDatabaseAsync();

        if (db.Stockpile.Count() == 0)
        {
            //Init...
            Init();

        }
        else
        {
            //Load...
            Load();
        }

    }

    private void IncrementCount(StockpileType type)
    {
        var inc = db.Income.FindOne(x => x.Type == type && x.Round == currentRound);
        db.Income.Update(inc);

        switch (type)
        {
            case StockpileType.Manpower:
                currentIncomeManpower++;
                break;
            case StockpileType.Ammo:
                currentIncomeAmmo++;
                break;
            case StockpileType.Fuel:
                currentIncomeFuel++;
                break;
            case StockpileType.VictoryPoints:
                currentIncomeVictoryPoints++;
                break;
        }
        // currentCount++;
        // await localStorage.SetItemAsync("Counter", currentCount);
    }

    private void DecrementCount(StockpileType type)
    {
        var inc = db.Income.FindOne(x => x.Type == type && x.Round == currentRound);
        if (inc.Amount > 0)
        {
            db.Income.Update(inc);

            switch (type)
            {
                case StockpileType.Manpower:
                    currentIncomeManpower--;
                    break;
                case StockpileType.Ammo:
                    currentIncomeAmmo--;
                    break;
                case StockpileType.Fuel:
                    currentIncomeFuel--;
                    break;
                case StockpileType.VictoryPoints:
                    currentIncomeVictoryPoints--;
                    break;
            }
        }
    }

    private void BuyOne(StockpileType type)
    {
        var stock = db.Stockpile.FindOne(x => x.Type == type && x.Round == currentRound);
        if (stock.Amount > 0)
        {
            stock.Amount--;//...Generiert
            db.Stockpile.Update(stock);

            switch (type)
            {
                case StockpileType.Manpower:
                    currentCountManpower--;
                    break;
                case StockpileType.Ammo:
                    currentCountAmmo--;
                    break;
                case StockpileType.Fuel:
                    currentCountFuel--;
                    break;
                case StockpileType.VictoryPoints:
                    currentCountVictoryPoints--;
                    break;
            }
        }
    }

    private void Init()
    {
        currentIncomeManpower = 1;
        currentIncomeAmmo = 1;
        currentIncomeFuel = 1;
        currentIncomeVictoryPoints = 0;
        currentCountManpower = 4;
        currentCountAmmo = 4;
        currentCountFuel = 4;
        currentCountVictoryPoints = 0;
        currentRound = 1;

        db.Income.Insert(new Income { Amount = currentIncomeManpower, Type = StockpileType.Manpower, Round = currentRound });
        db.Income.Insert(new Income { Amount = currentIncomeAmmo, Type = StockpileType.Ammo, Round = currentRound });
        db.Income.Insert(new Income { Amount = currentIncomeFuel, Type = StockpileType.Fuel, Round = currentRound });
        db.Income.Insert(new Income { Amount = currentIncomeVictoryPoints, Type = StockpileType.VictoryPoints, Round = currentRound });

        db.Stockpile.Insert(new Stockpile { Amount = currentCountManpower, Type = StockpileType.Manpower, Round = currentRound });
        db.Stockpile.Insert(new Stockpile { Amount = currentCountAmmo, Type = StockpileType.Ammo, Round = currentRound });
        db.Stockpile.Insert(new Stockpile { Amount = currentCountFuel, Type = StockpileType.Fuel, Round = currentRound });
        db.Stockpile.Insert(new Stockpile { Amount = currentCountVictoryPoints, Type = StockpileType.VictoryPoints, Round = currentRound });
    }

    private void Load()
    {
        currentRound = db.Income.Max(x => x.Round);
        currentIncomeManpower = db.Income.FindOne(x => x.Type == StockpileType.Manpower && x.Round == currentRound).Amount;
        currentIncomeAmmo = db.Income.FindOne(x => x.Type == StockpileType.Ammo && x.Round == currentRound).Amount;
        currentIncomeFuel = db.Income.FindOne(x => x.Type == StockpileType.Fuel && x.Round == currentRound).Amount;
        currentIncomeVictoryPoints = db.Income.FindOne(x => x.Type == StockpileType.VictoryPoints && x.Round == currentRound).Amount;

        currentCountManpower = db.Stockpile.FindOne(x => x.Type == StockpileType.Manpower && x.Round == currentRound).Amount;
        currentCountAmmo = db.Stockpile.FindOne(x => x.Type == StockpileType.Ammo && x.Round == currentRound).Amount;
        currentCountFuel = db.Stockpile.FindOne(x => x.Type == StockpileType.Fuel && x.Round == currentRound).Amount;
        currentCountVictoryPoints = db.Stockpile.FindOne(x => x.Type == StockpileType.VictoryPoints && x.Round == currentRound).Amount;
    }

    private async Task NewRoundAsync(MouseEventArgs e)
    {
        var incomeManpower = db.Income.FindOne(x => x.Type == StockpileType.Manpower && x.Round == currentRound).Amount;
        var incomeAmmo = db.Income.FindOne(x => x.Type == StockpileType.Ammo && x.Round == currentRound).Amount;
        var incomeFuel = db.Income.FindOne(x => x.Type == StockpileType.Fuel && x.Round == currentRound).Amount;
        var incomeVP = db.Income.FindOne(x => x.Type == StockpileType.VictoryPoints && x.Round == currentRound).Amount;
        var changed = new List<string>();

        if (incomeManpower != currentIncomeManpower)
        {
            changed.Add("Manpower: " + WithPlus(currentIncomeManpower - incomeManpower));
        }
        if (incomeAmmo != currentIncomeAmmo)
        {
            changed.Add("Ammo: " + WithPlus(currentIncomeAmmo - incomeAmmo));
        }
        if (incomeFuel != currentIncomeFuel)
        {
            changed.Add("Fuel: " + WithPlus(currentIncomeFuel - incomeFuel));
        }
        if (incomeVP != currentIncomeVictoryPoints)
        {
            changed.Add("VPs: " + WithPlus(currentIncomeVictoryPoints - incomeVP));
        }
        bool confirmed = false;


        if (!changed.Any())
        {
            confirmed = await JS.InvokeAsync<bool>("confirm", "Nächste Runde? Die Front ist unverändert! ");
        }
        else
        {
            confirmed = await JS.InvokeAsync<bool>("confirm", "Nächste Runde? Es gab Änderungen an der HKL: " + Environment.NewLine + string.Join(Environment.NewLine, changed));
        }

        if (confirmed)
        {

            currentRound++;
            currentCountManpower += currentIncomeManpower;
            currentCountAmmo += currentIncomeAmmo;
            currentCountFuel += currentIncomeFuel;
            currentCountVictoryPoints += currentIncomeVictoryPoints;

            db.Income.Insert(new Income { Amount = currentIncomeManpower, Type = StockpileType.Manpower, Round = currentRound });
            db.Income.Insert(new Income { Amount = currentIncomeAmmo, Type = StockpileType.Ammo, Round = currentRound });
            db.Income.Insert(new Income { Amount = currentIncomeFuel, Type = StockpileType.Fuel, Round = currentRound });
            db.Income.Insert(new Income { Amount = currentIncomeVictoryPoints, Type = StockpileType.VictoryPoints, Round = currentRound });

            db.Stockpile.Insert(new Stockpile { Amount = currentCountManpower, Type = StockpileType.Manpower, Round = currentRound });
            db.Stockpile.Insert(new Stockpile { Amount = currentCountAmmo, Type = StockpileType.Ammo, Round = currentRound });
            db.Stockpile.Insert(new Stockpile { Amount = currentCountFuel, Type = StockpileType.Fuel, Round = currentRound });
            db.Stockpile.Insert(new Stockpile { Amount = currentCountVictoryPoints, Type = StockpileType.VictoryPoints, Round = currentRound });

            await db.SaveDatabaseAsync();
        }

    }

    private async Task NewGameAsync(MouseEventArgs e)
    {

        var confirmed = await JS.InvokeAsync<bool>("confirm", "Wirklich neues Gefecht? ");
        if (confirmed)
        {
            db.Income.DeleteAll();
            db.Stockpile.DeleteAll();

            await db.SaveDatabaseAsync();

            Init();
            Load();
        }
    }

    public string WithPlus(int val)
    {
        if (val > 0) return "+" + val;
        else if (val < 0) return val.ToString();
        else return "0";
    }
}
