@page "/"
@using BlazorBootstrap
@using CompanyCommander.Components
@using CompanyCommander.DB
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject AppDbContext db
@implements IDisposable

<PageTitle>HqBoard</PageTitle>

<h1>HQ Board</h1>

<ConfirmDialog @ref="dialog" />
@*  In Modal: <BodyTemplate>...</BodyTemplate> *@
<Modal @ref="modal" Title="Sieg!">
    <BodyTemplate>
        Ihr wart siegreich!
    </BodyTemplate>
    <FooterTemplate>
        <Button Color="ButtonColor.Secondary" @onclick="async ()=>await modal.HideAsync()">Close</Button>
    </FooterTemplate>
</Modal>

<div class="container">
    <div class="row mb-3">
        <div class="col">
            <Dropdown Color="DropdownColor.Primary">
                <DropdownToggleButton>Neues Spiel</DropdownToggleButton>
                <DropdownMenu>
                    @if (_editions != null)
                        @foreach (var edition in _editions)
                        {
                            <DropdownItem Type="DropdownItemType.Button" @onclick="() =>NewGame(edition)">@edition.GetDescription()</DropdownItem>
                        }
                </DropdownMenu>
            </Dropdown>

            @* <button class="btn btn-primary me-2" @onclick="NewGameAsync">Neues Spiel</button> *@
        </div>
        <div class="col text-end">
            <p role="status">Runde: @currentRound</p>
        </div>
    </div>

    <div class="row">
        <div class="col-md-6 mb-3">
            <div class="card">
                <div class="card-header">
                    Einkommen
                </div>
                <div class="card-body">
                    <div class="row mb-3">
                        <div class="col text-start">
                            <p role="status">🪖 Manpower: @currentIncomeManpower</p>
                        </div>
                        <div class="col text-end">
                            <button class="btn btn-primary me-2" @onclick="() => IncrementCount(StockpileType.Manpower)">+1</button>
                            <button class="btn btn-primary" @onclick="() => DecrementCount(StockpileType.Manpower)">-1</button>
                        </div>
                    </div>

                    <div class="row mb-3">
                        <div class="col text-start">
                            <p role="status">💣 Ammo: @currentIncomeAmmo</p>
                        </div>
                        <div class="col text-end">
                            <button class="btn btn-primary me-2" @onclick="() => IncrementCount(StockpileType.Ammo)">+1</button>
                            <button class="btn btn-primary" @onclick="() => DecrementCount(StockpileType.Ammo)">-1</button>
                        </div>
                    </div>

                    <div class="row mb-3">
                        <div class="col text-start">
                            <p role="status">⛽ Fuel: @currentIncomeFuel</p>
                        </div>
                        <div class="col text-end">
                            <button class="btn btn-primary me-2" @onclick="() => IncrementCount(StockpileType.Fuel)">+1</button>
                            <button class="btn btn-primary" @onclick="() => DecrementCount(StockpileType.Fuel)">-1</button>
                        </div>
                    </div>

                    <div class="row mb-3">
                        <div class="col text-start">
                            <p role="status">🏆 Victory Points: @currentIncomeVictoryPoints</p>
                        </div>
                        <div class="col text-end">
                            <button class="btn btn-primary me-2" @onclick="() => IncrementCount(StockpileType.VictoryPoints)">+1</button>
                            <button class="btn btn-primary" @onclick="() => DecrementCount(StockpileType.VictoryPoints)">-1</button>
                        </div>
                    </div>
                    <br />
                    <br />

                    <div class="row mb-3">
                        <div class="col">
                            <button class="btn btn-primary me-2" @onclick="GainVp">☠ Kill +1</button>
                        </div>
                        <div class="col text-end">
                            <button class="btn btn-primary" @onclick="NextRoundAsync">Einkünfte anpassen</button>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <div class="col-md-6 mb-3">
            <div class="card">
                <div class="card-header">
                    Lager
                </div>
                <div class="card-body">
                    <div class="row mb-3">
                        <div class="col text-start">
                            <p role="status">🪖 Manpower: @currentCountManpower</p>
                        </div>
                        <div class="col text-end">
                            <button class="btn btn-primary me-2" @onclick="() => UndoOne(StockpileType.Manpower)">+1</button>
                            <button class="btn btn-primary me-2" @onclick="() => BuyOne(StockpileType.Manpower)">-1</button>
                        </div>
                    </div>

                    <div class="row mb-3">
                        <div class="col text-start">
                            <p role="status">💣 Ammo: @currentCountAmmo</p>
                        </div>
                        <div class="col text-end">
                            <button class="btn btn-primary me-2" @onclick="() => UndoOne(StockpileType.Ammo)">+1</button>
                            <button class="btn btn-primary me-2" @onclick="() => BuyOne(StockpileType.Ammo)">-1</button>
                        </div>
                    </div>

                    <div class="row mb-3">
                        <div class="col text-start">
                            <p role="status" class="mt-3">⛽ Fuel: @currentCountFuel</p>
                        </div>
                        <div class="col text-end">
                            <button class="btn btn-primary me-2" @onclick="() => UndoOne(StockpileType.Fuel)">+1</button>
                            <button class="btn btn-primary me-2" @onclick="() => BuyOne(StockpileType.Fuel)">-1</button>
                        </div>
                    </div>

                    <div class="row mb-3">
                        <div class="col text-start">
                            <p role="status" class="mt-3">🏆 Victory Points: @currentCountVictoryPoints</p>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>


    <div class="row mb-3">
        <div class="col">
            <h4>Reihenfolge:</h4>
            <ol>
                <li>Einkommen ggfs. anpassen</li>
                <li>Siegpunkte ggfs. durch FUKs anpassen</li>
                <li>Einkünfte anpassen</li>
                <li>Kaufen</li>
            </ol>
        </div>
    </div>
</div>

@code {
    //Initiale erste Runde:
    private int currentIncomeManpower;
    private int currentIncomeAmmo;
    private int currentIncomeFuel;
    private int currentIncomeVictoryPoints;
    private int currentCountManpower;
    private int currentCountAmmo;
    private int currentCountFuel;
    private int currentCountVictoryPoints;
    private int currentRound;
    private Game currentGame;
    private Modal modal = default!;
    private ConfirmDialog dialog = default!;
    private List<GameEdition> _editions;

    protected override async Task OnInitializedAsync()
    {
        await db.LoadDatabaseAsync();
        _editions = ((GameEdition[])Enum.GetValues(typeof(GameEdition))).ToList();

        if (db.Stockpile.Count() == 0)
        {
            //Init...
            Init();
        }
        else
        {
            //Load...
            Load();
        }
    }

    public void Dispose()
    {
    }

    private void IncrementCount(StockpileType type)
    {
        switch (type)
        {
            case StockpileType.Manpower:
                currentIncomeManpower++;
                break;
            case StockpileType.Ammo:
                currentIncomeAmmo++;
                break;
            case StockpileType.Fuel:
                currentIncomeFuel++;
                break;
            case StockpileType.VictoryPoints:
                currentIncomeVictoryPoints++;
                break;
        }
    }

    private void DecrementCount(StockpileType type)
    {
        switch (type)
        {
            case StockpileType.Manpower:
                if (currentIncomeManpower > 0)
                    currentIncomeManpower--;
                break;
            case StockpileType.Ammo:
                if (currentIncomeAmmo > 0)
                    currentIncomeAmmo--;
                break;
            case StockpileType.Fuel:
                if (currentIncomeFuel > 0)
                    currentIncomeFuel--;
                break;
            case StockpileType.VictoryPoints:
                if (currentIncomeVictoryPoints > 0)
                    currentIncomeVictoryPoints--;
                break;
        }
    }

    private async Task UndoOne(StockpileType type)
    {
        var stock = db.Stockpile.FindOne(x => x.Type == type && x.Round == currentRound);


        if (stock.Amount < stock.InitialAmount)
        {
            stock.Amount++;
            db.Stockpile.Update(stock);
            await db.SaveDatabaseAsync();
        }

        switch (type)
        {
            case StockpileType.Manpower:
                if (currentCountManpower < stock.InitialAmount)
                    currentCountManpower++;
                break;
            case StockpileType.Ammo:
                if (currentCountAmmo < stock.InitialAmount)
                    currentCountAmmo++;
                break;
            case StockpileType.Fuel:
                if (currentCountFuel < stock.InitialAmount)
                    currentCountFuel++;
                break;
        }
    }



    private async Task BuyOne(StockpileType type)
    {
        var stock = db.Stockpile.FindOne(x => x.Type == type && x.Round == currentRound);

        if (stock.Amount > 0)
        {
            stock.Amount--;
            db.Stockpile.Update(stock);
            await db.SaveDatabaseAsync();
        }

        switch (type)
        {
            case StockpileType.Manpower:
                if (currentCountManpower > 0)
                    currentCountManpower--;
                break;
            case StockpileType.Ammo:
                if (currentCountAmmo > 0)
                    currentCountAmmo--;
                break;
            case StockpileType.Fuel:
                if (currentCountFuel > 0)
                    currentCountFuel--;
                break;
        }

    }

    private void Init()
    {
        currentIncomeManpower = 1;
        currentIncomeAmmo = 1;
        currentIncomeFuel = 1;
        currentIncomeVictoryPoints = 0;
        currentCountManpower = 4;
        currentCountAmmo = 4;
        currentCountFuel = 4;
        currentCountVictoryPoints = 0;
        currentRound = 1;
        NewRound();
        db.Game.Insert(new Game() { Edition = GameEdition.FirstEditionProWithErrata, Start = DateTime.Now, VictoryPoints = 15 });
        currentGame = db.Game.FindAll().SingleOrDefault();
    }

    private void Load()
    {
        currentRound = db.Income.Max(x => x.Round);
        currentIncomeManpower = db.Income.FindOne(x => x.Type == StockpileType.Manpower && x.Round == currentRound).Amount;
        currentIncomeAmmo = db.Income.FindOne(x => x.Type == StockpileType.Ammo && x.Round == currentRound).Amount;
        currentIncomeFuel = db.Income.FindOne(x => x.Type == StockpileType.Fuel && x.Round == currentRound).Amount;
        currentIncomeVictoryPoints = db.Income.FindOne(x => x.Type == StockpileType.VictoryPoints && x.Round == currentRound).Amount;

        currentCountManpower = db.Stockpile.FindOne(x => x.Type == StockpileType.Manpower && x.Round == currentRound).Amount;
        currentCountAmmo = db.Stockpile.FindOne(x => x.Type == StockpileType.Ammo && x.Round == currentRound).Amount;
        currentCountFuel = db.Stockpile.FindOne(x => x.Type == StockpileType.Fuel && x.Round == currentRound).Amount;
        currentCountVictoryPoints = db.Stockpile.FindOne(x => x.Type == StockpileType.VictoryPoints && x.Round == currentRound).Amount;
        currentCountVictoryPoints += db.Fuks.Count();

        currentGame = db.Game.FindAll().SingleOrDefault();
    }

    private void NewRound()
    {


        db.Income.Insert(new Income { Amount = currentIncomeManpower, Type = StockpileType.Manpower, Round = currentRound, Date = DateTime.Now });
        db.Income.Insert(new Income { Amount = currentIncomeAmmo, Type = StockpileType.Ammo, Round = currentRound, Date = DateTime.Now });
        db.Income.Insert(new Income { Amount = currentIncomeFuel, Type = StockpileType.Fuel, Round = currentRound, Date = DateTime.Now });
        db.Income.Insert(new Income { Amount = currentIncomeVictoryPoints, Type = StockpileType.VictoryPoints, Round = currentRound, Date = DateTime.Now });

        db.Stockpile.Insert(new Stockpile { InitialAmount = currentCountManpower, Amount = currentCountManpower, Type = StockpileType.Manpower, Round = currentRound, Date = DateTime.Now });
        db.Stockpile.Insert(new Stockpile { InitialAmount = currentCountAmmo, Amount = currentCountAmmo, Type = StockpileType.Ammo, Round = currentRound, Date = DateTime.Now });
        db.Stockpile.Insert(new Stockpile { InitialAmount = currentCountFuel, Amount = currentCountFuel, Type = StockpileType.Fuel, Round = currentRound, Date = DateTime.Now });
        db.Stockpile.Insert(new Stockpile { InitialAmount = currentCountVictoryPoints, Amount = currentCountVictoryPoints, Type = StockpileType.VictoryPoints, Round = currentRound, Date = DateTime.Now });

    }

    private async Task NextRoundAsync(MouseEventArgs e)
    {
        var stockManpower = db.Stockpile.FindOne(x => x.Type == StockpileType.Manpower && x.Round == currentRound);
        var stockAmmo = db.Stockpile.FindOne(x => x.Type == StockpileType.Ammo && x.Round == currentRound);
        var stockFuel = db.Stockpile.FindOne(x => x.Type == StockpileType.Fuel && x.Round == currentRound);

        stockManpower.Amount = currentCountManpower;
        stockAmmo.Amount = currentCountAmmo;
        stockFuel.Amount = currentCountFuel;

        db.Stockpile.Update(stockManpower);
        db.Stockpile.Update(stockAmmo);
        db.Stockpile.Update(stockFuel);

        var incomeManpower = db.Income.FindOne(x => x.Type == StockpileType.Manpower && x.Round == currentRound).Amount;
        var incomeAmmo = db.Income.FindOne(x => x.Type == StockpileType.Ammo && x.Round == currentRound).Amount;
        var incomeFuel = db.Income.FindOne(x => x.Type == StockpileType.Fuel && x.Round == currentRound).Amount;
        var incomeVP = db.Income.FindOne(x => x.Type == StockpileType.VictoryPoints && x.Round == currentRound).Amount;
        var changed = new List<string>();

        if (incomeManpower != currentIncomeManpower)
        {
            changed.Add("Manpower: " + WithPlus(currentIncomeManpower - incomeManpower));
        }
        if (incomeAmmo != currentIncomeAmmo)
        {
            changed.Add("Ammo: " + WithPlus(currentIncomeAmmo - incomeAmmo));
        }
        if (incomeFuel != currentIncomeFuel)
        {
            changed.Add("Fuel: " + WithPlus(currentIncomeFuel - incomeFuel));
        }
        if (incomeVP != currentIncomeVictoryPoints)
        {
            changed.Add("VPs: " + WithPlus(currentIncomeVictoryPoints - incomeVP));
        }
        bool confirmed = false;

        if (!changed.Any())
        {
            confirmed = await dialog.ShowAsync(
       title: "Alles erledigt?",
       message1: "Nächste Runde? Die Front ist unverändert!");

        }
        else
        {
            var parameters = new Dictionary<string, object>();
            parameters.Add("Items", changed);
            parameters.Add("Title", "Nächste Runde? Es gab Änderungen an der HKL:");

            confirmed = await dialog.ShowAsync<NextRoundDialog>(
       title: "Alles erledigt?",
       parameters: parameters
            );
        }

        if (confirmed)
        {
            currentRound++;
            currentCountManpower += currentIncomeManpower;
            currentCountAmmo += currentIncomeAmmo;
            currentCountFuel += currentIncomeFuel;
            currentCountVictoryPoints += currentIncomeVictoryPoints;

            if (currentGame != null && currentCountVictoryPoints >= currentGame.VictoryPoints)
            {
                //TODO: generischer modal dialog machen
                await modal.ShowAsync();
            }

            NewRound();
            await db.SaveDatabaseAsync();
        }
    }

    private async Task NewGame(GameEdition edition)
    {
        await NewGameAsync();
    }

    private async Task NewGameAsync()
    {

        var confirmation = await dialog.ShowAsync(
           title: "Neues Gefecht?",
           message1: "Wirklich neues Gefecht satrten?");

        if (confirmation)
        {
            db.Income.DeleteAll();
            db.Stockpile.DeleteAll();
            db.Fuks.DeleteAll();
            db.Game.DeleteAll();
            await db.SaveDatabaseAsync();
            Init();
            Load();
        }

    }

    public string WithPlus(int val)
    {
        if (val > 0) return "+" + val;
        else if (val < 0) return val.ToString();
        else return "0";
    }

    private async Task GainVp(MouseEventArgs e)
    {
        currentCountVictoryPoints++;
        db.Fuks.Insert(new Fuk() { Date = DateTime.Now, Round = currentRound });
        await db.SaveDatabaseAsync();
    }
}
