@page "/"
@using BlazorBootstrap
@using CompanyCommander.Components
@using CompanyCommander.DB
@using CompanyCommander.Model
@inject GameService _gameService
@inject AppDbContext _db
@implements IDisposable

<PageTitle>HqBoard</PageTitle>

<h1>HQ Board</h1>

<ConfirmDialog @ref="_dialog" />
@*  In Modal: <BodyTemplate>...</BodyTemplate> *@
<Modal @ref="_modal" Title="Sieg!">
    <BodyTemplate>
        Ihr wart siegreich!
    </BodyTemplate>
    <FooterTemplate>
        <Button Color="ButtonColor.Secondary" @onclick="async ()=>await _modal.HideAsync()">Close</Button>
    </FooterTemplate>
</Modal>

<Modal @ref="_modalVpQuestion" Title="Neues Gefecht?">
    <BodyTemplate>
        Mit wievielen VPs spielt ihr?
    </BodyTemplate>
    <FooterTemplate>
        @if (_vps != null)
            @foreach (var vp in _vps)
            {
                <Button Color="ButtonColor.Primary" @onclick="async () =>{
                _newGameCallback(vp);
                await _modalVpQuestion.HideAsync();
                }">
                    @vp
                </Button>
            }
        <Button Color="ButtonColor.Secondary" @onclick="async () =>{
                await _modalVpQuestion.HideAsync();
                }">
            Cancel
        </Button>
    </FooterTemplate>
</Modal>

<div class="container">
    <div class="row mb-3">
        <div class="col text-start">
            <Dropdown Color="DropdownColor.Primary">
                <DropdownToggleButton>Neues Spiel</DropdownToggleButton>
                <DropdownMenu>
                    @if (_editions != null)
                        @foreach (var edition in _editions)
                        {
                            <DropdownItem Type="DropdownItemType.Button" @onclick="() => NewGameAsync(edition)">@edition.GetDescription()</DropdownItem>
                        }
                </DropdownMenu>
            </Dropdown>
        </div>
        <div class="col text-center">
            <p role="status">Runde: @_currentRound</p>
        </div>
        <div class="col text-end">
            <button class="btn btn-primary me-2" @onclick="AppResetAsync">Reset</button>
        </div>
    </div>

    <div class="row">
        <div class="col-md-6 mb-3">
            <div class="card">
                <div class="card-header">
                    Einkommen
                </div>
                <div class="card-body">
                    <div class="row mb-3">
                        <div class="col text-start">
                            <p role="status">🪖 Manpower: +@_currentIncome.Manpower</p>
                        </div>
                        <div class="col text-end">
                            <button class="btn btn-primary" @onclick="() => DecrementCount(StockpileType.Manpower)">-1</button>
                            <button class="btn btn-primary me-2" @onclick="() => IncrementCount(StockpileType.Manpower)">+1</button>
                        </div>
                    </div>

                    <div class="row mb-3">
                        <div class="col text-start">
                            <p role="status">💣 Ammo: +@_currentIncome.Ammo</p>
                        </div>
                        <div class="col text-end">
                            <button class="btn btn-primary" @onclick="() => DecrementCount(StockpileType.Ammo)">-1</button>
                            <button class="btn btn-primary me-2" @onclick="() => IncrementCount(StockpileType.Ammo)">+1</button>
                        </div>
                    </div>

                    <div class="row mb-3">
                        <div class="col text-start">
                            <p role="status">⛽ Fuel: +@_currentIncome.Fuel</p>
                        </div>
                        <div class="col text-end">
                            <button class="btn btn-primary" @onclick="() => DecrementCount(StockpileType.Fuel)">-1</button>
                            <button class="btn btn-primary me-2" @onclick="() => IncrementCount(StockpileType.Fuel)">+1</button>
                        </div>
                    </div>

                    <div class="row mb-3">
                        <div class="col text-start">
                            <p role="status">🏆 Victory Points: +@_currentIncome.VictoryPoints</p>
                        </div>
                        <div class="col text-end">
                            <button class="btn btn-primary" @onclick="() => DecrementCount(StockpileType.VictoryPoints)">-1</button>
                            <button class="btn btn-primary me-2" @onclick="() => IncrementCount(StockpileType.VictoryPoints)">+1</button>
                        </div>
                    </div>
                    <br />
                    <br />

                    <div class="row mb-3">
                        <div class="col">
                            <button class="btn btn-primary me-2" @onclick="GainVp">☠ Kill +1</button>
                        </div>
                        <div class="col text-end">
                            <button class="btn btn-primary" @onclick="NextRoundAsync">Einkünfte anpassen</button>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <div class="col-md-6 mb-3">
            <div class="card">
                <div class="card-header">
                    Lager
                </div>
                <div class="card-body">
                    <div class="row mb-3">
                        <div class="col text-start">
                            <p role="status">🪖 Manpower: @_currentCount.Manpower</p>
                        </div>
                        <div class="col text-end">
                            <button class="btn btn-primary me-2" @onclick="() => BuyOne(StockpileType.Manpower)">-1</button>
                            <button class="btn btn-primary me-2" @onclick="() => UndoOne(StockpileType.Manpower)">+1</button>
                        </div>
                    </div>

                    <div class="row mb-3">
                        <div class="col text-start">
                            <p role="status">💣 Ammo: @_currentCount.Ammo</p>
                        </div>
                        <div class="col text-end">
                            <button class="btn btn-primary me-2" @onclick="() => BuyOne(StockpileType.Ammo)">-1</button>
                            <button class="btn btn-primary me-2" @onclick="() => UndoOne(StockpileType.Ammo)">+1</button>
                        </div>
                    </div>

                    <div class="row mb-3">
                        <div class="col text-start">
                            <p role="status" class="mt-3">⛽ Fuel: @_currentCount.Fuel</p>
                        </div>
                        <div class="col text-end">
                            <button class="btn btn-primary me-2" @onclick="() => BuyOne(StockpileType.Fuel)">-1</button>
                            <button class="btn btn-primary me-2" @onclick="() => UndoOne(StockpileType.Fuel)">+1</button>
                        </div>
                    </div>

                    <div class="row mb-3">
                        <div class="col text-start">

                            @if (_currentGame != null)
                            {
                                <p role="status" class="mt-3">
                                    🏆 Victory Points: @_currentCount.VictoryPoints / @_currentGame.VictoryPoints
                                </p>
                            }
                            else
                            {
                                <p role="status" class="mt-3">
                                    🏆 Victory Points: @_currentCount.VictoryPoints
                                </p>
                            }

                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>


    <div class="row mb-3">
        <div class="col">
            <h4>Reihenfolge:</h4>
            <ol>
                <li>Einkommen ggfs. anpassen</li>
                <li>Siegpunkte ggfs. durch FUKs anpassen</li>
                <li>Einkünfte anpassen</li>
                <li>Kaufen</li>
            </ol>
        </div>
    </div>
</div>

@code {
    private IncomeModel _currentIncome = new IncomeModel();
    private IncomeModel _currentCount = new IncomeModel();
    private int _currentRound;
    private Game _currentGame;
    private Modal _modal = default!;
    private Modal _modalVpQuestion = default!;
    private ConfirmDialog _dialog = default!;
    private List<GameEdition> _editions;
    private List<int> _vps;
    private Action<int> _newGameCallback;

    protected override async Task OnInitializedAsync()
    {
        await _db.LoadDatabaseAsync();
        _editions = ((GameEdition[])Enum.GetValues(typeof(GameEdition))).ToList();

        if (_db.Stockpile.Count() == 0)
        {
            //Init...
            await Init(GameEdition.FirstEditionProWithErrata);
        }
        else
        {
            //Load...
            Load();
        }
    }

    public void Dispose()
    {
    }

    private void IncrementCount(StockpileType type)
    {
        switch (type)
        {
            case StockpileType.Manpower:
                _currentIncome.Manpower++;
                break;
            case StockpileType.Ammo:
                _currentIncome.Ammo++;
                break;
            case StockpileType.Fuel:
                _currentIncome.Fuel++;
                break;
            case StockpileType.VictoryPoints:
                _currentIncome.VictoryPoints++;
                break;
        }
    }

    private void DecrementCount(StockpileType type)
    {
        switch (type)
        {
            case StockpileType.Manpower:
                if (_currentIncome.Manpower > 0)
                    _currentIncome.Manpower--;
                break;
            case StockpileType.Ammo:
                if (_currentIncome.Ammo > 0)
                    _currentIncome.Ammo--;
                break;
            case StockpileType.Fuel:
                if (_currentIncome.Fuel > 0)
                    _currentIncome.Fuel--;
                break;
            case StockpileType.VictoryPoints:
                if (_currentIncome.VictoryPoints > 0)
                    _currentIncome.VictoryPoints--;
                break;
        }
    }

    private async Task UndoOne(StockpileType type)
    {
        var stock = _db.Stockpile.FindOne(x => x.Type == type && x.Round == _currentRound);

        if (stock.Amount < stock.InitialAmount)
        {
            stock.Amount++;
            _db.Stockpile.Update(stock);
            await _db.SaveDatabaseAsync();
        }

        switch (type)
        {
            case StockpileType.Manpower:
                if (_currentCount.Manpower < stock.InitialAmount)
                    _currentCount.Manpower++;
                break;
            case StockpileType.Ammo:
                if (_currentCount.Ammo < stock.InitialAmount)
                    _currentCount.Ammo++;
                break;
            case StockpileType.Fuel:
                if (_currentCount.Fuel < stock.InitialAmount)
                    _currentCount.Fuel++;
                break;
        }
    }

    private async Task BuyOne(StockpileType type)
    {
        var stock = _db.Stockpile.FindOne(x => x.Type == type && x.Round == _currentRound);

        if (stock.Amount > 0)
        {
            stock.Amount--;
            _db.Stockpile.Update(stock);
            await _db.SaveDatabaseAsync();
        }

        switch (type)
        {
            case StockpileType.Manpower:
                if (_currentCount.Manpower > 0)
                    _currentCount.Manpower--;
                break;
            case StockpileType.Ammo:
                if (_currentCount.Ammo > 0)
                    _currentCount.Ammo--;
                break;
            case StockpileType.Fuel:
                if (_currentCount.Fuel > 0)
                    _currentCount.Fuel--;
                break;
        }
    }

    private async Task Init(GameEdition edition, int targetVpPick = 15)
    {
        var result = await _gameService.InitializeGameAsync(edition, targetVpPick);

        _currentCount = result.currentCount;
        _currentIncome = result.currentIncome;
        _currentGame = result.currentGame;
        _vps = result.vps;

        StateHasChanged();//TODO: mit @bind machen...
    }

    private void Load()
    {
        var result = _gameService.LoadGame();

        _currentRound = result.currentRound;
        _currentCount = result.currentCount;
        _currentIncome = result.currentIncome;
        _currentGame = result.currentGame;
    }

    private async Task NextRoundAsync(MouseEventArgs e)
    {
        var changed = _gameService.GetChangedIncome(_currentRound, _currentIncome);

        bool confirmed = false;

        if (!changed.Any())
        {
            confirmed = await _dialog.ShowAsync(
       title: "Alles erledigt?",
       message1: "Nächste Runde? Die Front ist unverändert!");

        }
        else
        {
            var parameters = new Dictionary<string, object>();
            parameters.Add("Items", changed);
            parameters.Add("Title", "Nächste Runde? Es gab Änderungen an der HKL:");

            confirmed = await _dialog.ShowAsync<NextRoundDialog>(
       title: "Alles erledigt?",
       parameters: parameters
            );
        }

        if (confirmed)
        {
            await _gameService.ProcessNextRoundAsync(_currentGame, _currentIncome, _currentCount, _currentRound, _modal);
            Load();
        }
    }

    private async Task AppResetAsync()
    {
        var opt = new ConfirmDialogOptions()
            {
                YesButtonText = "Reset",
                YesButtonColor = ButtonColor.Danger
            };
        var confirmation = await _dialog.ShowAsync(
           title: "Reset App?",
           message1: "Es wird ALLES zurückgesetzt?",
        confirmDialogOptions: opt);

        if (confirmation)
        {
            await _db.ClearLocalStorageAsync();
            await _db.LoadDatabaseAsync();
            await Init(GameEdition.FirstEditionProWithErrata);
        }
    }

    private async Task NewGameAsync(GameEdition edition)
    {
        _newGameCallback = async vp =>
        {
            _db.Income.DeleteAll();
            _db.Stockpile.DeleteAll();
            _db.Fuks.DeleteAll();
            _db.Game.DeleteAll();
            await _db.SaveDatabaseAsync();
            await Init(edition, vp);
            Load();
        };

        _vps = _gameService.GetInitVps(edition);
        await _modalVpQuestion.ShowAsync();
    }

    private async Task GainVp(MouseEventArgs e)
    {
        var stock = _db.Stockpile.FindOne(x => x.Type == StockpileType.VictoryPoints && x.Round == _currentRound);

        stock.Amount++;
        _db.Stockpile.Update(stock);
        _currentCount.VictoryPoints++;
        _db.Fuks.Insert(new Fuk() { Date = DateTime.Now, Round = _currentRound });
        await _db.SaveDatabaseAsync();
    }
}
