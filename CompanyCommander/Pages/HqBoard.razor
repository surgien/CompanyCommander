@page "/"
@using BlazorBootstrap
@using CompanyCommander.Backend
@using CompanyCommander.Components
@using CompanyCommander.DB
@using CompanyCommander.Model
@inject GameService _gameService
@implements IDisposable

<PageTitle>HqBoard</PageTitle>

<h1>HQ Board</h1>

@if (_isLoading)
{
    <div class="loading-screen">
        <p>Loading...</p>
    </div>
}
else
{
    <ConfirmDialog @ref="_dialog" />
    @*  In Modal: <BodyTemplate>...</BodyTemplate> *@
    <Modal @ref="_modal" Title="Sieg!">
        <BodyTemplate>
            Ihr wart siegreich!
        </BodyTemplate>
        <FooterTemplate>
            <Button Color="ButtonColor.Secondary" @onclick="async ()=>await _modal.HideAsync()">Close</Button>
        </FooterTemplate>
    </Modal>

    <Modal @ref="_modalVpQuestion" Title="Neues Gefecht?">
        <BodyTemplate>
            <div class="row mb-3">
                <div class="col">
                    <div class="card">
                        <div class="card-header">
                            Spieler
                        </div>
                        <div class="card-body">
                            <div class="form-group">
                                <label>Spielername:</label>
                                <InputText @bind-Value="_selectedPlayerName" class="form-control" />
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <div class="row mb-3">
                <div class="col-md-6 mb-3 mb-md-0">
                    <div class="card">
                        <div class="card-header">
                            Fraktion
                        </div>
                        <div class="card-body">
                            <div class="form-group">
                                <label>Fraktion:</label>
                                @if (_factions != null)
                                {
                                    <InputRadioGroup @bind-Value="_selectedFaction" class="form-control">
                                        @foreach (var option in _factions)
                                        {
                                            <div class="form-check">
                                                <InputRadio class="form-check-input" Value="@option" id="@option" />
                                                <label class="form-check-label" for="@option">@option</label>
                                            </div>
                                        }
                                    </InputRadioGroup>

                                }
                            </div>
                        </div>
                    </div>
                </div>

                <div class="col-md-6">
                    <div class="card">
                        <div class="card-header">
                            Siegpunkte
                        </div>
                        <div class="card-body">
                            <div class="form-group">
                                <label>Siegpunkte:</label>
                                @if (_vps != null)
                                {
                                    <InputRadioGroup @bind-Value="_selectedVp" class="form-control">
                                        @foreach (var option in _vps)
                                        {
                                            <div class="form-check">
                                                <InputRadio class="form-check-input" Value="@option" id="@option" />
                                                <label class="form-check-label" for="@option">@option</label>
                                            </div>
                                        }
                                    </InputRadioGroup>
                                }
                            </div>
                        </div>
                    </div>
                </div>
            </div>


        </BodyTemplate>

    <FooterTemplate>
        <Button Color="ButtonColor.Primary" @onclick="async () =>{
                    _newGameCallback();
                    await _modalVpQuestion.HideAsync();
                    }">
            Start
        </Button>
        <Button Color="ButtonColor.Secondary" @onclick="async () =>{
                    await _modalVpQuestion.HideAsync();
                    }">
            Cancel
        </Button>
    </FooterTemplate>
</Modal>

    <div class="container">
        <div class="row mb-3">
            <div class="col text-start">
                <Dropdown Color="DropdownColor.Primary">
                    <DropdownToggleButton>Neues Spiel</DropdownToggleButton>
                    <DropdownMenu>
                        @if (_editions != null)
                            @foreach (var edition in _editions)
                            {
                                <DropdownItem Type="DropdownItemType.Button" @onclick="() => NewGameAsync(edition)">@edition.GetDescription()</DropdownItem>
                            }
                    </DropdownMenu>
                </Dropdown>
            </div>
            <div class="col text-center">
                <p role="status">Runde: @_currentRound</p>
            </div>
            <div class="col text-end">
                <Dropdown Color="DropdownColor.Primary" Split="true">
                    <DropdownActionButton @onclick="OnSave">Push</DropdownActionButton>
                    <DropdownToggleButton />
                    <DropdownMenu>
                        <DropdownItem To="#" Color="DropdownColor.Danger"
                                      Type="DropdownItemType.Link" @onclick="AppResetAsync">Reset</DropdownItem>

                        <DropdownItem To="#" Color="DropdownColor.Primary"
                                      Type="DropdownItemType.Link" @onclick="AppRefresh">Refresh</DropdownItem>
                    </DropdownMenu>
                </Dropdown>
            </div>
        </div>

        <div class="row">
            <div class="col-md-6 mb-3">
                <div class="card">
                    <div class="card-header">
                        Einkommen
                    </div>
                    <div class="card-body">
                        <div class="row mb-3">
                            <div class="col text-start">
                                <p role="status">🪖 Manpower: +@_currentIncome.Manpower</p>
                            </div>
                            <div class="col text-end">
                                <button class="btn btn-primary" @onclick="() => DecrementCount(StockpileType.Manpower)">-1</button>
                                <button class="btn btn-primary me-2" @onclick="() => IncrementCount(StockpileType.Manpower)">+1</button>
                            </div>
                        </div>

                        <div class="row mb-3">
                            <div class="col text-start">
                                <p role="status">💣 Ammo: +@_currentIncome.Ammo</p>
                            </div>
                            <div class="col text-end">
                                <button class="btn btn-primary" @onclick="() => DecrementCount(StockpileType.Ammo)">-1</button>
                                <button class="btn btn-primary me-2" @onclick="() => IncrementCount(StockpileType.Ammo)">+1</button>
                            </div>
                        </div>

                        <div class="row mb-3">
                            <div class="col text-start">
                                <p role="status">⛽ Fuel: +@_currentIncome.Fuel</p>
                            </div>
                            <div class="col text-end">
                                <button class="btn btn-primary" @onclick="() => DecrementCount(StockpileType.Fuel)">-1</button>
                                <button class="btn btn-primary me-2" @onclick="() => IncrementCount(StockpileType.Fuel)">+1</button>
                            </div>
                        </div>

                        <div class="row mb-3">
                            <div class="col text-start">
                                <p role="status">🏆 Victory Points: +@_currentIncome.VictoryPoints</p>
                            </div>
                            <div class="col text-end">
                                <button class="btn btn-primary" @onclick="() => DecrementCount(StockpileType.VictoryPoints)">-1</button>
                                <button class="btn btn-primary me-2" @onclick="() => IncrementCount(StockpileType.VictoryPoints)">+1</button>
                            </div>
                        </div>
                        <br />
                        <br />

                        <div class="row mb-3">
                            <div class="col">
                                <button class="btn btn-primary me-2" @onclick="GainVp">☠ Kill +1</button>
                            </div>
                            <div class="col text-end">
                                <button class="btn btn-primary" @onclick="NextRoundAsync">Einkünfte anpassen</button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <div class="col-md-6 mb-3">
                <div class="card">
                    <div class="card-header">
                        Lager
                    </div>
                    <div class="card-body">
                        <div class="row mb-3">
                            <div class="col text-start">
                                <Badge Color="BadgeColor.Primary" IndicatorType="BadgeIndicatorType.RoundedPill">🪖 Manpower: @CurrentCount.Manpower</Badge>
                            </div>

                            <div class="col text-end">
                                <button class="btn btn-primary me-2" @onclick="() => BuyOne(StockpileType.Manpower)">-1</button>
                            </div>

                            <div class="d-flex mb-3">
                                <div class="flex-fill">
                                    <RangeInput TValue="int"
                                                @bind-Value="CurrentCount.Manpower" Min="0"
                                                Max="_currentCountMax[StockpileType.Manpower]"
                                                TickMarks="_currentCountMarks[StockpileType.Manpower]"
                                                LabelOrientation="Horizontal"
                                                @onpointerup="()=> OnPointerUp(StockpileType.Manpower, CurrentCount.Manpower)" />

                                    <div class="d-flex justify-content-between">
                                        @for (int i = 0; i <= _currentCountMax[StockpileType.Manpower]; i++)
                                        {
                                            <span>@i</span>
                                            if (_currentCountMax[StockpileType.Manpower] > 9)
                                            {
                                                i++;
                                            }
                                            if (_currentCountMax[StockpileType.Manpower] > 14)
                                            {
                                                i++;
                                            }
                                        }
                                    </div>
                                </div>
                            </div>

                        </div>

                        <div class="row mb-3">
                            <div class="col text-start">
                                <Badge Color="BadgeColor.Primary" IndicatorType="BadgeIndicatorType.RoundedPill">💣 Ammo: @CurrentCount.Ammo</Badge>
                            </div>
                            <div class="col text-end">
                                <button class="btn btn-primary me-2" @onclick="() => BuyOne(StockpileType.Ammo)">-1</button>
                            </div>

                            <div class="d-flex mb-3">
                                <div class="flex-fill">
                                    <RangeInput TValue="int"
                                                @bind-Value="CurrentCount.Ammo" Min="0"
                                                Max="_currentCountMax[StockpileType.Ammo]"
                                                TickMarks="_currentCountMarks[StockpileType.Ammo]"
                                                LabelOrientation="Horizontal"
                                                @onpointerup="()=> OnPointerUp(StockpileType.Ammo, CurrentCount.Ammo)" />

                                    <div class="d-flex justify-content-between">
                                        @for (int i = 0; i <= _currentCountMax[StockpileType.Ammo]; i++)
                                        {
                                            <span>@i</span>
                                            if (_currentCountMax[StockpileType.Ammo] > 9)
                                            {
                                                i++;
                                            }
                                            if (_currentCountMax[StockpileType.Ammo] > 14)
                                            {
                                                i++;
                                            }
                                        }
                                    </div>
                                </div>
                            </div>
                        </div>

                        <div class="row mb-3">
                            <div class="col text-start">
                                <Badge Color="BadgeColor.Primary" IndicatorType="BadgeIndicatorType.RoundedPill">⛽ Fuel: @CurrentCount.Fuel</Badge>
                            </div>
                            <div class="col text-end">
                                <button class="btn btn-primary me-2" @onclick="() => BuyOne(StockpileType.Fuel)">-1</button>
                            </div>

                            <div class="d-flex mb-3">
                                <div class="flex-fill">
                                    <RangeInput TValue="int"
                                                @bind-Value="CurrentCount.Fuel" Min="0"
                                                Max="_currentCountMax[StockpileType.Fuel]"
                                                TickMarks="_currentCountMarks[StockpileType.Fuel]"
                                                LabelOrientation="Horizontal"
                                                @onpointerup="()=> OnPointerUp(StockpileType.Fuel, CurrentCount.Fuel)" />

                                    <div class="d-flex justify-content-between">
                                        @for (int i = 0; i <= _currentCountMax[StockpileType.Fuel]; i++)
                                        {
                                            if (_currentCountMax[StockpileType.Ammo] > 9)
                                            {
                                                i++;
                                            }
                                            if (_currentCountMax[StockpileType.Ammo] > 14)
                                            {
                                                i++;
                                            }
                                            <span>@i</span>
                                        }

                                    </div>
                                </div>
                            </div>
                        </div>

                        <div class="row mb-3">
                            <div class="col text-start">

                                @if (_currentGame != null)
                                {
                                    <p role="status" class="mt-3">
                                        🏆 Victory Points: @CurrentCount.VictoryPoints / @_currentGame.VictoryPoints
                                    </p>
                                }
                                else
                                {
                                    <p role="status" class="mt-3">
                                        🏆 Victory Points: @CurrentCount.VictoryPoints
                                    </p>
                                }

                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>


        <div class="row mb-3">
            <div class="col">
                <h4>Reihenfolge:</h4>
                <ol>
                    <li>Einkommen ggfs. anpassen</li>
                    <li>Siegpunkte ggfs. durch FUKs anpassen</li>
                    <li>Einkünfte anpassen</li>
                    <li>Kaufen</li>
                </ol>
            </div>
        </div>
    </div>


    @code {
    private bool _isLoading = true;
    private IncomeModel _currentIncome = new IncomeModel();

    private IncomeModel _currentCount;

    public IncomeModel CurrentCount
    {
        get { return _currentCount; }
        set
        {
            _currentCount = value;
            StateHasChanged();
        }
    }

    private int _currentRound = 1;
    private Game _currentGame;
    private Modal _modal = default!;
    private Modal _modalVpQuestion = default!;
    private ConfirmDialog _dialog = default!;
    private List<GameEdition> _editions;
    private List<int> _vps;
    private int _selectedVp;
    private List<Faction> _factions;
    private Faction _selectedFaction = Faction.GermanWehrmacht;
    private string _selectedPlayerName = "Spieler 1";
    private Dictionary<StockpileType, List<TickMark>> _currentCountMarks = new Dictionary<StockpileType, List<TickMark>>()
    { { StockpileType.Manpower, new List<TickMark>()},{ StockpileType.Fuel, new List<TickMark>()},{ StockpileType.Ammo, new List<TickMark>()} };
    private Dictionary<StockpileType, int> _currentCountMax = new Dictionary<StockpileType, int>()
    { { StockpileType.Manpower,1},{ StockpileType.Ammo,1},{ StockpileType.Fuel,1} };
    private Action _newGameCallback;

    protected override async Task OnInitializedAsync()
    {
        var result = await _gameService.LoadDatabaseAsync();

        _editions = result.editions;
        _factions = result.factions;

        UpdateCountMarks();
        if (result.isRunning)
        {
            //Init...
            await Init(GameEdition.FirstEditionProWithErrata);
        }
        else
        {
            //Load...
            Load();
        }

        _isLoading = false;
    }

    private void UpdateCountMarks(IncomeModel initialAmounts = null)
    {
        if (initialAmounts == null)
        {
            initialAmounts = _gameService.GetInitialAmounts(_currentRound);
        }

        if (initialAmounts.Manpower > 0)
            _currentCountMax[StockpileType.Manpower] = initialAmounts.Manpower;
        if (initialAmounts.Ammo > 0)
            _currentCountMax[StockpileType.Ammo] = initialAmounts.Ammo;
        if (initialAmounts.Fuel > 0)
            _currentCountMax[StockpileType.Fuel] = initialAmounts.Fuel;

        _currentCountMarks[StockpileType.Manpower] = new List<TickMark>();
        _currentCountMarks[StockpileType.Ammo] = new List<TickMark>();
        _currentCountMarks[StockpileType.Fuel] = new List<TickMark>();

        for (int i = 1; i <= _currentCountMax[StockpileType.Manpower]; i++)
        {
            _currentCountMarks[StockpileType.Manpower].Add(new TickMark() { Label = "", Value = i.ToString() });
            if (_currentCountMax[StockpileType.Manpower] > 14)
            {
                i++;
            }
        }
        for (int i = 1; i <= _currentCountMax[StockpileType.Ammo]; i++)
        {
            _currentCountMarks[StockpileType.Ammo].Add(new TickMark() { Label = "", Value = i.ToString() });
            if (_currentCountMax[StockpileType.Ammo] > 14)
            {
                i++;
            }
        }
        for (int i = 1; i <= _currentCountMax[StockpileType.Fuel]; i++)
        {
            _currentCountMarks[StockpileType.Fuel].Add(new TickMark() { Label = "", Value = i.ToString() });
            if (_currentCountMax[StockpileType.Fuel] > 14)
            {
                i++;
            }
        }
        StateHasChanged();//TODO: mit @bind machen...
    }

    public void Dispose()
    {
    }

    private void IncrementCount(StockpileType type)
    {
        _gameService.IncrementCount(type, _currentIncome);
    }

    private void DecrementCount(StockpileType type)
    {
        _gameService.DecrementCount(type, _currentIncome);
    }

    private async void UndoOne(StockpileType type)
    {
        await _gameService.UndoOneAsync(type, CurrentCount, _currentRound);
    }

    private async void OnPointerUp(StockpileType type, int amount)
    {
        await _gameService.UpdateCurrentCountAsync(type, CurrentCount, _currentRound, amount);
    }

    private async void BuyOne(StockpileType type)
    {
        await _gameService.BuyOneAsync(type, CurrentCount, _currentRound);
    }

    private async Task Init(GameEdition edition, int targetVpPick = 15)
    {
        var result = await _gameService.InitializeGameAsync(edition, _selectedFaction, _selectedPlayerName, targetVpPick);

        _currentIncome = result.currentIncome;
        _currentGame = result.currentGame;
        _vps = result.vps;
        _selectedVp = _vps.First();

        UpdateCountMarks(result.currentCount);
        CurrentCount = result.currentCount;

        StateHasChanged();//TODO: mit @bind machen...
    }

    private void Load()
    {
        var result = _gameService.LoadGame();

        _currentRound = result.currentRound;

        UpdateCountMarks();

        if (CurrentCount == null)
        {
            CurrentCount = result.currentCount;
        }
        else
        {

            CurrentCount.Manpower = result.currentCount.Manpower;
            CurrentCount.Ammo = result.currentCount.Ammo;
            CurrentCount.VictoryPoints = result.currentCount.VictoryPoints;
            CurrentCount.Fuel = result.currentCount.Fuel;
        }

        _currentIncome = result.currentIncome;
        _currentGame = result.currentGame;
        StateHasChanged();//TODO: mit @bind machen...
    }

    private async Task NextRoundAsync(MouseEventArgs e)
    {
        var changed = _gameService.GetChangedIncome(_currentRound, _currentIncome);

        bool confirmed = false;

        if (!changed.Any())
        {
            confirmed = await _dialog.ShowAsync(
       title: "Alles erledigt?",
       message1: "Nächste Runde? Die Front ist unverändert!");

        }
        else
        {
            var parameters = new Dictionary<string, object>();
            parameters.Add("Items", changed);
            parameters.Add("Title", "Nächste Runde? Es gab Änderungen an der HKL:");

            confirmed = await _dialog.ShowAsync<NextRoundDialog>(
       title: "Alles erledigt?",
       parameters: parameters
            );
        }

        if (confirmed)
        {
            _currentCountMax[StockpileType.Manpower] = _currentCount.Manpower + _currentIncome.Manpower;
            _currentCountMax[StockpileType.Ammo] = _currentCount.Ammo + _currentIncome.Ammo;
            _currentCountMax[StockpileType.Fuel] = _currentCount.Fuel + _currentIncome.Fuel;

            await _gameService.ProcessNextRoundAsync(_currentGame, _currentIncome, CurrentCount, _currentRound, _modal);
            Load();
            UpdateCountMarks();

        }
    }

    private async Task AppResetAsync()
    {
        var opt = new ConfirmDialogOptions()
            {
                YesButtonText = "Reset",
                YesButtonColor = ButtonColor.Danger
            };
        var confirmation = await _dialog.ShowAsync(
           title: "Reset App?",
           message1: "Es wird ALLES zurückgesetzt?",
        confirmDialogOptions: opt);

        if (confirmation)
        {
            await _gameService.ClearDatabaseAsync();
        }
    }

    private async Task NewGameAsync(GameEdition edition)
    {
        _newGameCallback = async () =>
        {
            await _gameService.DeleteAllAsync();
            await Init(edition, _selectedVp);
            Load();
        };

        _vps = _gameService.GetInitVps(edition);
        _selectedVp = _vps.First();

        await _modalVpQuestion.ShowAsync();

    }

    private async void GainVp(MouseEventArgs e)
    {
        await _gameService.GainVictoryPointAsync(_currentRound, CurrentCount);
        StateHasChanged();
    }

    private async Task OnSave(MouseEventArgs e)
    {
        await _gameService.SaveBackendAsync(_currentRound, _currentGame);
    }
    private void AppRefresh(MouseEventArgs e)
    {
        // CurrentCount.Manpower -= 1;
        // StateHasChanged();
        // CurrentCount.Manpower += 1;

        // CurrentCount.Ammo += 1;
        // CurrentCount.Ammo -= 1;

        // CurrentCount.Fuel += 1;
        // CurrentCount.Fuel -= 1;


        StateHasChanged();
    }
}

}

